<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr;
use DoctrineExtensions\Query\Mysql\Acos;
use DoctrineExtensions\Query\Mysql\Cos;
use DoctrineExtensions\Query\Mysql\Sin;
use DoctrineExtensions\Query\Mysql\Radians;

/**
 * BlogPostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SpaceRepository extends EntityRepository
{
    public function getNumberTotalListing($user)
    {
        return $this->_em->createQuery('select COUNT (sp.id) from AppBundle\Entity\Space\Space sp where sp.user =:user')
            ->setParameter('user', $user)
            ->getSingleScalarResult();

    }

    public function getNumberActiveListing($user)
    {
        return $this->_em->createQuery('select COUNT (sp.id) from AppBundle\Entity\Space\Space sp where sp.user = :user and sp.enabled = :enabled and sp.completedCreate = :completedCreate')
            ->setParameter('user', $user)
            ->setParameter('completedCreate', true)
            ->setParameter('enabled', true)
            ->getSingleScalarResult();

    }

    public function getUnfinishedListings($user)
    {
        $expr = new Expr();
        $qb = $this->createQueryBuilder('space')
            ->where($expr->eq('space.user', ':user'))
            ->andWhere($expr->eq('space.completedCreate', ':completedCreate'))
            ->setParameter('completedCreate', false)
            ->setParameter('user', $user);
        return $qb;

    }

    public function findMySpaces($user, $query)
    {
        $expr = new Expr();
        $qb = $this->createQueryBuilder('space')
            ->join('space.location', 'location')
            ->where($expr->eq('space.user', ':user'))
            ->andWhere($expr->eq('space.completedCreate', ':completedCreate'))
            ->setParameter('completedCreate',true)
            ->setParameter('user', $user);
        if (isset($query['type-space']) && $query['type-space'] != '') {
            $qb->andWhere('location.typeSpace = :typeSpace')
                ->setParameter('typeSpace', $query['type-space']);
        }
        if (isset($query['status-space']) && $query['status-space'] != '') {
            $value = $query['status-space'] == 'enabled' ? true:false;
            $qb->andWhere('space.enabled = :enabled')
                ->setParameter('enabled', $value);
        }
        return $qb;

    }

    public function searchSpaces($query)
    {
        $expr = new Expr();
        $fields = [];
        $fields[] = "space";
        if (isset($query['lat']) && isset($query['lng'])) {
            $lat = $query['lat'];
            $lng = $query['lng'];
            $fields[] = "( 3959 * acos( cos( radians('$lat') ) * cos( radians( location.lat ) ) * cos( radians( location.lng ) - radians('$lng') ) + sin( radians('$lat') ) * sin( radians( location.lat ) ) ) ) AS distance";
        }
        $qb = $this->_em->createQueryBuilder()
            ->select($fields)
            ->from($this->_entityName, 'space', null)
            ->join('space.location', 'location')
            ->join('space.price', 'price')
            ->join('space.dateBooking', 'dateBooking')
            ->leftJoin('space.features', 'features');
        if (isset($query['lat']) && isset($query['lng'])) {
            $qb->orderBy('distance', 'ASC');
        }

//        if (isset($query['from']) && $query['from'] != '') {
//            $fromDate = \DateTime::createFromFormat('m/d/Y', $query['from']);
//            $qb->andWhere('dateBooking.dateFrom >= :from')
//                ->setParameter('from', $fromDate->format('Y-m-d'));
//        }
//        if (isset($query['to']) && $query['to'] != '') {
//            $toDate = \DateTime::createFromFormat('m/d/Y', $query['to']);
//            $qb->andWhere('dateBooking.dateTo <= :to')
//                ->setParameter('to', $toDate->format('Y-m-d'));
//        }
//        if (isset($query['price']) && $query['price'] != '') {
//            $price = explode(';',$query['price']);
//            $priceFrom = $price[0];
//            $priceTo = $price[1];
//            $qb->andWhere('price.daily >= :priceFrom AND price.daily <= :priceTo')
//                ->setParameter('priceFrom', $priceFrom)
//                ->setParameter('priceTo', $priceTo);
//        }
//        if (isset($query['square']) && $query['square'] != '') {
//            $square = explode(';',$query['square']);
//            $squareFrom = $square[0];
//            $squareTo = $square[1];
//            $qb->andWhere('location.squareFeet >= :squareFrom AND location.squareFeet <= :squareTo')
//                ->setParameter('squareFrom', $squareFrom)
//                ->setParameter('squareTo', $squareTo);
//        }
        return $qb;

    }

    public function getNumberListingNearbySpaces($query, $radius)
    {
        $expr = new Expr();
        $lat = $query['lat'];
        $lng = $query['lng'];
        $distance = "( 3959 * acos( cos( radians('$lat') ) * cos( radians( location.lat ) ) * cos( radians( location.lng ) - radians('$lng') ) + sin( radians('$lat') ) * sin( radians( location.lat ) ) ) )";
        $qb = $this->_em->createQueryBuilder()
            ->select('count(space.id)')
            ->from($this->_entityName, 'space', null)
            ->join('space.location', 'location')
            ->join('space.price', 'price')
            ->join('space.dateBooking', 'dateBooking')
            ->leftJoin('space.features', 'features')
            ->where($distance . " <= :radius")
            ->setParameter('radius', $radius);
        $result = $qb->getQuery()->getSingleScalarResult();


        return intval($result);

    }
}
